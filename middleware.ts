import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"

// Routes qui n√©cessitent une authentification
const protectedRoutes = ["/tenant/dashboard", "/owner/dashboard", "/messaging", "/admin"]

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // V√©rifier si la route n√©cessite une authentification
  const isProtectedRoute = protectedRoutes.some((route) => pathname.startsWith(route))

  if (isProtectedRoute) {
    console.log("üîí Middleware - Route prot√©g√©e:", pathname)

    // R√©cup√©rer tous les cookies pour d√©bugger
    const allCookies = request.cookies.getAll()
    console.log(
      "üç™ Middleware - Tous les cookies:",
      allCookies.map((c) => c.name),
    )

    // Chercher les cookies Supabase (plusieurs formats possibles)
    const supabaseCookies = allCookies.filter(
      (cookie) => cookie.name.includes("supabase") || cookie.name.includes("sb-") || cookie.name.includes("auth-token"),
    )

    console.log(
      "üîë Middleware - Cookies Supabase trouv√©s:",
      supabaseCookies.map((c) => c.name),
    )

    // Si on a des cookies Supabase, on laisse passer
    if (supabaseCookies.length > 0) {
      console.log("‚úÖ Middleware - Cookies trouv√©s, acc√®s autoris√©")
      return NextResponse.next()
    }

    console.log("‚ùå Middleware - Pas de cookies, redirection vers login")
    return NextResponse.redirect(new URL("/login", request.url))
  }

  return NextResponse.next()
}

export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
}
