import { type NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const leaseId = params.id

    console.log("üì§ [SEND-TO-TENANT] Envoi du bail au locataire:", leaseId)

    // V√©rifier que le bail existe et a un document g√©n√©r√©
    const { data: lease, error: leaseError } = await supabase.from("leases").select("*").eq("id", leaseId).single()

    if (leaseError || !lease) {
      console.error("‚ùå [SEND-TO-TENANT] Bail non trouv√©:", leaseError)
      return NextResponse.json({ success: false, error: "Bail non trouv√©" }, { status: 404 })
    }

    if (!lease.generated_document) {
      return NextResponse.json(
        {
          success: false,
          error: "Le document doit √™tre g√©n√©r√© avant l'envoi",
        },
        { status: 400 },
      )
    }

    if (lease.status !== "draft") {
      return NextResponse.json(
        {
          success: false,
          error: "Le bail a d√©j√† √©t√© envoy√©",
        },
        { status: 400 },
      )
    }

    // Mettre √† jour le statut du bail
    const { error: updateError } = await supabase
      .from("leases")
      .update({
        status: "sent_to_tenant",
        sent_to_tenant_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq("id", leaseId)

    if (updateError) {
      console.error("‚ùå [SEND-TO-TENANT] Erreur mise √† jour:", updateError)
      return NextResponse.json({ success: false, error: "Erreur lors de l'envoi" }, { status: 500 })
    }

    console.log("‚úÖ [SEND-TO-TENANT] Bail envoy√© avec succ√®s")

    return NextResponse.json({
      success: true,
      message: "Bail envoy√© au locataire avec succ√®s",
    })
  } catch (error) {
    console.error("‚ùå [SEND-TO-TENANT] Erreur:", error)
    return NextResponse.json({ success: false, error: "Erreur serveur" }, { status: 500 })
  }
}
