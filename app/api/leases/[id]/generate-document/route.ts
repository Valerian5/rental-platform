import { type NextRequest, NextResponse } from "next/server"
import { leaseDataAnalyzer } from "@/lib/lease-data-analyzer"
import { leaseTemplateService } from "@/lib/lease-template-service"
import { supabase } from "@/lib/supabase"

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const leaseId = params.id
    console.log("üöÄ [SERVER] G√©n√©ration document pour bail:", leaseId)

    // Analyser les donn√©es du bail
    const analysis = await leaseDataAnalyzer.analyze(leaseId)
    console.log(`üìä [SERVER] Analyse: ${analysis.completionRate}% complet`)
    console.log("üéØ [SERVER] Peut g√©n√©rer:", analysis.canGenerate)

    if (!analysis.canGenerate) {
      const missingFields = analysis.missingRequired.map((field) => {
        const fieldDef = analysis.availableData[field]
        return `${fieldDef?.label || field}`
      })

      console.log("‚ùå [SERVER] Champs manquants d√©taill√©s:", analysis.missingRequired)
      return NextResponse.json(
        {
          error: "Donn√©es manquantes",
          message: "Certaines donn√©es obligatoires sont manquantes",
          missingFields,
          redirectTo: `/owner/leases/${leaseId}/complete-data`,
        },
        { status: 400 },
      )
    }

    // R√©cup√©rer le bail pour d√©terminer le type
    const { data: lease } = await supabase.from("leases").select("lease_type").eq("id", leaseId).single()

    if (!lease) {
      return NextResponse.json({ error: "Bail non trouv√©" }, { status: 404 })
    }

    // R√©cup√©rer le template appropri√©
    const template = await leaseTemplateService.getDefaultTemplate(lease.lease_type)
    if (!template) {
      return NextResponse.json({ error: `Template non trouv√© pour le type: ${lease.lease_type}` }, { status: 404 })
    }

    console.log("üìÑ [SERVER] Template trouv√©:", template.name)

    // Pr√©parer les donn√©es pour le template
    const templateData: Record<string, any> = {}
    for (const [key, field] of Object.entries(analysis.availableData)) {
      templateData[key] = field.value
    }

    console.log("üîß [SERVER] Compilation du template...")
    console.log("üîß Compilation template avec", Object.keys(templateData).length, "variables")

    // Compiler le template avec Handlebars
    const Handlebars = require("handlebars")

    // Enregistrer les helpers
    Handlebars.registerHelper("if", function (conditional: any, options: any) {
      if (conditional) {
        return options.fn(this)
      } else {
        return options.inverse(this)
      }
    })

    Handlebars.registerHelper("each", (context: any[], options: any) => {
      let ret = ""
      if (context && context.length > 0) {
        for (let i = 0; i < context.length; i++) {
          ret += options.fn(context[i])
        }
      }
      return ret
    })

    // Debug: v√©rifier les variables utilis√©es dans le template
    const templateVariables = template.template_content.match(/\{\{([^}]+)\}\}/g) || []
    const uniqueVariables = [...new Set(templateVariables.map((v) => v.replace(/[{}]/g, "").trim()))]

    for (const variable of uniqueVariables) {
      if (templateData[variable] !== undefined) {
        console.log(`‚úÖ Remplac√©: ${variable} = ${templateData[variable]}`)
      } else {
        console.log(`‚ùå Variable non trouv√©e: ${variable}`)
      }
    }

    const compiledTemplate = Handlebars.compile(template.template_content)
    const documentContent = compiledTemplate(templateData)

    console.log("‚úÖ [SERVER] Document g√©n√©r√©, longueur:", documentContent.length, "caract√®res")

    // Sauvegarder le document g√©n√©r√©
    console.log("üíæ [SERVER] Sauvegarde du document...")
    const { error: saveError } = await supabase
      .from("leases")
      .update({
        generated_document: documentContent,
        document_generated_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq("id", leaseId)

    if (saveError) {
      console.error("‚ùå [SERVER] Erreur sauvegarde:", saveError)
      throw saveError
    }

    console.log("‚úÖ [SERVER] Document sauvegard√© avec succ√®s")

    // CORRIG√â : Retourner le document g√©n√©r√©
    return NextResponse.json({
      success: true,
      message: "Document g√©n√©r√© avec succ√®s",
      document: {
        content: documentContent,
        template: template.name,
        generatedAt: new Date().toISOString(),
      },
      analysis: {
        completionRate: analysis.completionRate,
        totalFields: Object.keys(analysis.availableData).length,
      },
    })
  } catch (error) {
    console.error("‚ùå [SERVER] Erreur g√©n√©ration:", error)
    return NextResponse.json(
      { error: "Erreur lors de la g√©n√©ration du document", details: error instanceof Error ? error.message : error },
      { status: 500 },
    )
  }
}
