import { type NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { owner_id, system_preference_id } = body

    if (!owner_id || !system_preference_id) {
      return NextResponse.json({ error: "owner_id et system_preference_id requis" }, { status: 400 })
    }

    console.log("üîÑ Application du mod√®le syst√®me:", system_preference_id, "pour:", owner_id)

    // 1. R√©cup√©rer le mod√®le syst√®me
    const { data: systemPreference, error: systemError } = await supabase
      .from("scoring_preferences")
      .select("*")
      .eq("model_type", system_preference_id)
      .eq("is_system", true)
      .single()

    if (systemError || !systemPreference) {
      console.error("‚ùå Mod√®le syst√®me introuvable:", systemError)
      return NextResponse.json({ error: "Mod√®le syst√®me introuvable" }, { status: 404 })
    }

    console.log("‚úÖ Mod√®le syst√®me r√©cup√©r√©:", systemPreference.name)

    // 2. D√©sactiver les pr√©f√©rences par d√©faut existantes
    const { error: updateError } = await supabase
      .from("scoring_preferences")
      .update({ is_default: false })
      .eq("owner_id", owner_id)
      .eq("is_system", false)

    if (updateError) {
      console.error("‚ö†Ô∏è Erreur d√©sactivation pr√©f√©rences existantes:", updateError)
    }

    // 3. Cr√©er une nouvelle pr√©f√©rence utilisateur bas√©e sur le mod√®le syst√®me
    const newPreference = {
      owner_id: owner_id,
      name: `${systemPreference.name} (Appliqu√©)`,
      description: systemPreference.description,
      model_type: systemPreference.model_type,
      is_default: true,
      is_system: false,
      system_preference_id: systemPreference.id,
      criteria: systemPreference.criteria,
      exclusion_rules: systemPreference.exclusion_rules,
    }

    const { data: preference, error: insertError } = await supabase
      .from("scoring_preferences")
      .insert(newPreference)
      .select()
      .single()

    if (insertError) {
      console.error("‚ùå Erreur cr√©ation pr√©f√©rence:", insertError)
      return NextResponse.json({ error: insertError.message }, { status: 500 })
    }

    console.log("‚úÖ Pr√©f√©rence utilisateur cr√©√©e:", preference.id)

    return NextResponse.json({
      preference,
      message: `Mod√®le "${systemPreference.name}" appliqu√© avec succ√®s`,
    })
  } catch (error) {
    console.error("‚ùå Erreur API use-system:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}
