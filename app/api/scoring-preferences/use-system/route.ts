import { NextResponse, type NextRequest } from "next/server"
import { supabase } from "@/lib/supabase"
import { authService } from "@/lib/auth-service"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { owner_id, system_preference_id } = body

    console.log("üîÑ Application du mod√®le syst√®me:", { owner_id, system_preference_id })

    // V√©rifier l'authentification
    const user = await authService.getCurrentUser()
    if (!user || user.user_type !== "owner" || user.id !== owner_id) {
      return NextResponse.json({ error: "Acc√®s non autoris√©" }, { status: 403 })
    }

    if (!system_preference_id) {
      return NextResponse.json({ error: "ID du mod√®le syst√®me requis" }, { status: 400 })
    }

    // R√©cup√©rer le mod√®le syst√®me
    const { data: systemPreference, error: systemError } = await supabase
      .from("scoring_preferences")
      .select("*")
      .eq("id", system_preference_id)
      .eq("is_system", true)
      .single()

    if (systemError || !systemPreference) {
      console.error("Erreur r√©cup√©ration mod√®le syst√®me:", systemError)
      return NextResponse.json({ error: "Mod√®le syst√®me introuvable" }, { status: 404 })
    }

    console.log("üìä Mod√®le syst√®me trouv√©:", systemPreference.name)

    // Supprimer l'ancienne pr√©f√©rence par d√©faut de l'utilisateur
    await supabase.from("scoring_preferences").delete().eq("owner_id", owner_id).eq("is_default", true)

    // Cr√©er une nouvelle pr√©f√©rence bas√©e sur le mod√®le syst√®me
    const newPreference = {
      owner_id,
      name: `${systemPreference.name} (personnalis√©)`,
      is_default: true,
      is_system: false,
      system_preference_id: system_preference_id,
      criteria: systemPreference.criteria,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    }

    const { data: createdPreference, error: createError } = await supabase
      .from("scoring_preferences")
      .insert(newPreference)
      .select()
      .single()

    if (createError) {
      console.error("Erreur cr√©ation pr√©f√©rence:", createError)
      return NextResponse.json({ error: "Erreur lors de la cr√©ation de la pr√©f√©rence" }, { status: 500 })
    }

    console.log("‚úÖ Pr√©f√©rence cr√©√©e:", createdPreference.id)

    return NextResponse.json({
      preference: createdPreference,
      message: "Mod√®le appliqu√© avec succ√®s",
    })
  } catch (error) {
    console.error("Erreur serveur:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}
