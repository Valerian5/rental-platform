import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@supabase/supabase-js"
import { scoringPreferencesService } from "@/lib/scoring-preferences-service"

// Cr√©er le client Supabase avec la cl√© service pour contourner RLS si n√©cessaire
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
})

// Client normal pour les op√©rations utilisateur
const supabase = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
})

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const ownerId = searchParams.get("owner_id")
    const defaultOnly = searchParams.get("default_only") === "true"

    if (!ownerId) {
      return NextResponse.json({ error: "owner_id requis" }, { status: 400 })
    }

    console.log("üîç R√©cup√©ration pr√©f√©rences pour:", ownerId, "default_only:", defaultOnly)

    // Utiliser le client admin pour √©viter les probl√®mes RLS lors de la lecture
    let query = supabaseAdmin
      .from("scoring_preferences")
      .select("*")
      .eq("owner_id", ownerId)
      .order("created_at", { ascending: false })

    if (defaultOnly) {
      query = query.eq("is_default", true).limit(1)
    }

    const { data: preferences, error } = await query

    if (error) {
      console.error("‚ùå Erreur r√©cup√©ration pr√©f√©rences:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Pr√©f√©rences r√©cup√©r√©es:", preferences?.length || 0)

    return NextResponse.json({ preferences: preferences || [] })
  } catch (error) {
    console.error("‚ùå Erreur API scoring-preferences GET:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const {
      owner_id,
      name,
      model_type = "custom",
      is_default = true,
      criteria,
      exclusion_rules,
      system_preference_id,
    } = body

    console.log("üíæ Cr√©ation pr√©f√©rence pour:", owner_id, "mod√®le:", model_type)

    if (!owner_id || !name || !criteria) {
      return NextResponse.json({ error: "owner_id, name et criteria sont requis" }, { status: 400 })
    }

    // Valider la structure des crit√®res
    const requiredCriteria = [
      "income_ratio",
      "guarantor",
      "professional_stability",
      "file_quality",
      "property_coherence",
      "income_distribution",
    ]

    for (const criterion of requiredCriteria) {
      if (!criteria[criterion] || typeof criteria[criterion].weight !== "number") {
        return NextResponse.json({ error: `Crit√®re ${criterion} manquant ou invalide` }, { status: 400 })
      }
    }

    // V√©rifier que le total des poids ne d√©passe pas 100
    const totalWeight = Object.values(criteria).reduce((sum: number, criterion: any) => {
      return sum + (criterion.weight || 0)
    }, 0)

    if (totalWeight > 100) {
      return NextResponse.json(
        { error: `Le total des poids ne peut pas d√©passer 100 (actuellement: ${totalWeight})` },
        { status: 400 },
      )
    }

    // V√©rifier que l'utilisateur existe
    const { data: user, error: userError } = await supabaseAdmin.from("users").select("id").eq("id", owner_id).single()

    if (userError || !user) {
      console.error("‚ùå Utilisateur non trouv√©:", owner_id, userError)
      return NextResponse.json({ error: "Utilisateur non trouv√©" }, { status: 404 })
    }

    // Si c'est une pr√©f√©rence par d√©faut, d√©sactiver les autres
    if (is_default) {
      const { error: updateError } = await supabaseAdmin
        .from("scoring_preferences")
        .update({ is_default: false })
        .eq("owner_id", owner_id)
        .eq("is_system", false)

      if (updateError) {
        console.error("‚ö†Ô∏è Erreur mise √† jour pr√©f√©rences existantes:", updateError)
      }
    }

    // Cr√©er la nouvelle pr√©f√©rence avec versioning
    const preferenceData = {
      owner_id,
      name,
      model_type,
      is_default,
      is_system: false, // Toujours false pour les pr√©f√©rences utilisateur
      criteria,
      exclusion_rules: exclusion_rules || {
        incomplete_file: false,
        no_guarantor_when_required: true,
        income_ratio_below_2: false,
        unverified_documents: false,
        manifest_incoherence: true,
      },
      system_preference_id,
      version: 1, // Version initiale
    }

    console.log("üìù Donn√©es √† ins√©rer:", {
      ...preferenceData,
      criteria: "...", // Ne pas logger les crit√®res complets
      exclusion_rules: "...",
    })

    // Utiliser le client admin pour l'insertion
    const { data: preference, error } = await supabaseAdmin
      .from("scoring_preferences")
      .insert(preferenceData)
      .select()
      .single()

    if (error) {
      console.error("‚ùå Erreur cr√©ation pr√©f√©rence:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Pr√©f√©rence de scoring cr√©√©e:", preference.id)

    // Invalider le cache pour ce propri√©taire
    scoringPreferencesService.invalidatePreferencesCache(owner_id)

    return NextResponse.json({
      preference,
      message: "Pr√©f√©rence de scoring cr√©√©e avec succ√®s",
    })
  } catch (error) {
    console.error("‚ùå Erreur API scoring-preferences POST:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    const body = await request.json()
    const { id, ...updateData } = body

    if (!id) {
      return NextResponse.json({ error: "ID requis" }, { status: 400 })
    }

    console.log("üîÑ Mise √† jour pr√©f√©rence:", id)

    // R√©cup√©rer la pr√©f√©rence actuelle pour obtenir la version
    const { data: currentPreference, error: fetchError } = await supabaseAdmin
      .from("scoring_preferences")
      .select("version, owner_id")
      .eq("id", id)
      .eq("is_system", false)
      .single()

    if (fetchError || !currentPreference) {
      return NextResponse.json({ error: "Pr√©f√©rence non trouv√©e" }, { status: 404 })
    }

    // Incr√©menter la version
    const newVersion = (currentPreference.version || 1) + 1
    const updatedData = { ...updateData, version: newVersion }

    // Si c'est une pr√©f√©rence par d√©faut, d√©sactiver les autres
    if (updateData.is_default && updateData.owner_id) {
      const { error: updateError } = await supabaseAdmin
        .from("scoring_preferences")
        .update({ is_default: false })
        .eq("owner_id", updateData.owner_id)
        .eq("is_system", false)
        .neq("id", id)

      if (updateError) {
        console.error("‚ö†Ô∏è Erreur mise √† jour pr√©f√©rences existantes:", updateError)
      }
    }

    const { data: preference, error } = await supabaseAdmin
      .from("scoring_preferences")
      .update(updatedData)
      .eq("id", id)
      .eq("is_system", false) // Seulement les pr√©f√©rences utilisateur
      .select()
      .single()

    if (error) {
      console.error("‚ùå Erreur mise √† jour pr√©f√©rence:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Pr√©f√©rence mise √† jour:", preference.id, "nouvelle version:", newVersion)

    // Invalider le cache pour ce propri√©taire
    scoringPreferencesService.invalidatePreferencesCache(currentPreference.owner_id)

    return NextResponse.json({
      preference,
      message: "Pr√©f√©rence mise √† jour avec succ√®s",
    })
  } catch (error) {
    console.error("‚ùå Erreur API scoring-preferences PUT:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}
