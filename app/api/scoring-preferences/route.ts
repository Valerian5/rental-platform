import { NextResponse, type NextRequest } from "next/server"
import { supabase } from "@/lib/supabase"

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const ownerId = searchParams.get("owner_id")
    const defaultOnly = searchParams.get("default_only") === "true"

    if (!ownerId) {
      return NextResponse.json({ error: "owner_id requis" }, { status: 400 })
    }

    console.log("üéØ R√©cup√©ration pr√©f√©rences scoring:", { ownerId, defaultOnly })

    let query = supabase.from("scoring_preferences").select("*").eq("owner_id", ownerId)

    if (defaultOnly) {
      query = query.eq("is_default", true)
    } else {
      query = query.order("is_default", { ascending: false }).order("created_at", { ascending: false })
    }

    const { data, error } = await query

    if (error) {
      console.error("Erreur r√©cup√©ration pr√©f√©rences:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("üìä Pr√©f√©rences trouv√©es:", data?.length || 0)

    // Si aucune pr√©f√©rence personnalis√©e trouv√©e, r√©cup√©rer le mod√®le syst√®me par d√©faut
    if (!data || data.length === 0) {
      console.log("üîç Recherche mod√®le syst√®me par d√©faut...")

      const { data: systemData, error: systemError } = await supabase
        .from("scoring_preferences")
        .select("*")
        .eq("is_system", true)
        .eq("is_default", true)
        .single()

      if (systemError) {
        console.error("Erreur r√©cup√©ration mod√®le syst√®me:", systemError)
        return NextResponse.json({ preferences: [] })
      }

      console.log("‚úÖ Mod√®le syst√®me trouv√©:", systemData?.name)
      return NextResponse.json({ preferences: [systemData] })
    }

    return NextResponse.json({ preferences: data })
  } catch (error) {
    console.error("Erreur serveur:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { owner_id, is_default, ...preferenceData } = body

    console.log("üíæ Cr√©ation nouvelle pr√©f√©rence:", { owner_id, is_default, name: preferenceData.name })

    // Si c'est une pr√©f√©rence par d√©faut, d√©sactiver les autres pr√©f√©rences par d√©faut de ce propri√©taire
    if (is_default) {
      console.log("üîÑ D√©sactivation des autres pr√©f√©rences par d√©faut...")
      const { error: updateError } = await supabase
        .from("scoring_preferences")
        .update({ is_default: false })
        .eq("owner_id", owner_id)
        .eq("is_system", false) // Ne pas toucher aux pr√©f√©rences syst√®me

      if (updateError) {
        console.error("Erreur d√©sactivation pr√©f√©rences:", updateError)
        return NextResponse.json({ error: updateError.message }, { status: 500 })
      }
    }

    // Cr√©er la nouvelle pr√©f√©rence
    const { data, error } = await supabase
      .from("scoring_preferences")
      .insert({
        owner_id,
        is_default,
        is_system: false, // Les pr√©f√©rences utilisateur ne sont jamais syst√®me
        ...preferenceData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .select()
      .single()

    if (error) {
      console.error("Erreur cr√©ation pr√©f√©rence:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Pr√©f√©rence cr√©√©e:", data.id)
    return NextResponse.json({ preference: data })
  } catch (error) {
    console.error("Erreur serveur:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}
