import { type NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"

export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const conversationId = params.id
    const body = await request.json()
    const { property_id } = body

    if (!property_id) {
      return NextResponse.json({ error: "property_id est requis" }, { status: 400 })
    }

    console.log("üîÑ Mise √† jour conversation", conversationId, "avec propri√©t√©", property_id)

    // V√©rifier que la propri√©t√© existe
    const { data: property, error: propertyError } = await supabase
      .from("properties")
      .select("id, title")
      .eq("id", property_id)
      .single()

    if (propertyError || !property) {
      console.error("‚ùå Propri√©t√© non trouv√©e:", property_id, propertyError)
      return NextResponse.json({ error: "Propri√©t√© non trouv√©e" }, { status: 404 })
    }

    // Mettre √† jour la conversation
    const { data: updatedConversation, error: updateError } = await supabase
      .from("conversations")
      .update({ property_id })
      .eq("id", conversationId)
      .select()
      .single()

    if (updateError) {
      console.error("‚ùå Erreur mise √† jour conversation:", updateError)
      return NextResponse.json({ error: "Erreur lors de la mise √† jour de la conversation" }, { status: 500 })
    }

    console.log("‚úÖ Conversation mise √† jour:", updatedConversation.id, "avec propri√©t√©:", property.title)

    return NextResponse.json({
      conversation: updatedConversation,
      property: property,
    })
  } catch (error) {
    console.error("‚ùå Erreur API update-property:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}
