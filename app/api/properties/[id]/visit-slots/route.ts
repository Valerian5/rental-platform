import { NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log("üîç GET visit-slots pour propri√©t√©:", params.id)

    // R√©cup√©rer le token d'autorisation depuis les headers
    const authHeader = request.headers.get("authorization")
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log("‚ùå Pas de token d'autorisation")
      return NextResponse.json({ error: "Vous devez √™tre connect√©" }, { status: 401 })
    }

    const token = authHeader.substring(7) // Enlever "Bearer "

    // V√©rifier le token avec Supabase
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser(token)

    if (authError || !user) {
      console.log("‚ùå Token invalide:", authError)
      return NextResponse.json({ error: "Token d'authentification invalide" }, { status: 401 })
    }

    console.log("‚úÖ Utilisateur authentifi√©:", user.id)

    // V√©rifier que l'ID de propri√©t√© est fourni
    if (!params.id) {
      return NextResponse.json({ error: "ID de propri√©t√© manquant" }, { status: 400 })
    }

    // V√©rifier que la propri√©t√© existe
    const { data: property, error: propertyError } = await supabase
      .from("properties")
      .select("id, owner_id")
      .eq("id", params.id)
      .single()

    if (propertyError) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration de la propri√©t√©:", propertyError)
      return NextResponse.json({ error: "Propri√©t√© non trouv√©e" }, { status: 404 })
    }

    if (!property) {
      console.error("‚ùå Propri√©t√© non trouv√©e pour l'ID:", params.id)
      return NextResponse.json({ error: "Propri√©t√© non trouv√©e" }, { status: 404 })
    }

    console.log("‚úÖ Propri√©t√© trouv√©e:", property.id, "Owner:", property.owner_id)

    // R√©cup√©rer le profil utilisateur
    const { data: userProfile, error: profileError } = await supabase
      .from("users")
      .select("user_type")
      .eq("id", user.id)
      .single()

    if (profileError) {
      console.error("‚ùå Erreur profil:", profileError)
      return NextResponse.json({ error: "Erreur profil utilisateur" }, { status: 500 })
    }

    console.log("‚úÖ Profil utilisateur:", userProfile.user_type)

    // V√©rifier les permissions
    const isOwner = property.owner_id === user.id
    const isTenant = userProfile.user_type === "tenant"

    if (!isOwner && !isTenant) {
      console.log("‚ùå Pas d'autorisation - Owner:", isOwner, "Tenant:", isTenant)
      return NextResponse.json({ error: "Vous n'avez pas acc√®s √† cette propri√©t√©" }, { status: 403 })
    }

    console.log("‚úÖ Permissions OK - Owner:", isOwner, "Tenant:", isTenant)

    // R√©cup√©rer les cr√©neaux de visite
    console.log("üîç R√©cup√©ration des cr√©neaux pour la propri√©t√©:", params.id)

    const { data: slots, error: slotsError } = await supabase
      .from("property_visit_slots")
      .select("*")
      .eq("property_id", params.id)
      .order("date", { ascending: true })
      .order("start_time", { ascending: true })

    if (slotsError) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des cr√©neaux:", slotsError)
      console.error("‚ùå D√©tails de l'erreur:", JSON.stringify(slotsError, null, 2))
      return NextResponse.json(
        {
          error: "Erreur lors de la r√©cup√©ration des cr√©neaux",
          details: slotsError.message,
        },
        { status: 500 },
      )
    }

    console.log("‚úÖ Cr√©neaux r√©cup√©r√©s:", slots?.length || 0)

    // Filtrer les cr√©neaux pour les locataires
    const filteredSlots = isTenant
      ? (slots || []).filter((slot) => slot.is_available && new Date(slot.date) >= new Date())
      : slots || []

    console.log("‚úÖ Cr√©neaux filtr√©s:", filteredSlots.length)
    return NextResponse.json({ slots: filteredSlots })
  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale lors de la r√©cup√©ration des cr√©neaux:", error)
    return NextResponse.json(
      {
        error: "Erreur serveur",
        details: error instanceof Error ? error.message : "Erreur inconnue",
      },
      { status: 500 },
    )
  }
}

export async function POST(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log("üíæ POST visit-slots pour propri√©t√©:", params.id)

    // R√©cup√©rer le token d'autorisation depuis les headers
    const authHeader = request.headers.get("authorization")
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log("‚ùå Pas de token d'autorisation")
      return NextResponse.json({ error: "Vous devez √™tre connect√©" }, { status: 401 })
    }

    const token = authHeader.substring(7) // Enlever "Bearer "

    // V√©rifier le token avec Supabase
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser(token)

    if (authError || !user) {
      console.log("‚ùå Token invalide:", authError)
      return NextResponse.json({ error: "Token d'authentification invalide" }, { status: 401 })
    }

    // R√©cup√©rer le profil utilisateur
    const { data: userProfile, error: profileError } = await supabase
      .from("users")
      .select("user_type")
      .eq("id", user.id)
      .single()

    if (profileError || userProfile.user_type !== "owner") {
      console.log("‚ùå Pas propri√©taire:", profileError, userProfile?.user_type)
      return NextResponse.json({ error: "Vous devez √™tre connect√© en tant que propri√©taire" }, { status: 401 })
    }

    // V√©rifier que l'ID de propri√©t√© est fourni
    if (!params.id) {
      return NextResponse.json({ error: "ID de propri√©t√© manquant" }, { status: 400 })
    }

    // V√©rifier que la propri√©t√© existe et appartient √† l'utilisateur
    const { data: property, error: propertyError } = await supabase
      .from("properties")
      .select("id, owner_id")
      .eq("id", params.id)
      .single()

    if (propertyError || !property) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration de la propri√©t√©:", propertyError)
      return NextResponse.json({ error: "Propri√©t√© non trouv√©e" }, { status: 404 })
    }

    if (property.owner_id !== user.id) {
      console.log("‚ùå Pas le propri√©taire:", property.owner_id, "vs", user.id)
      return NextResponse.json({ error: "Vous n'√™tes pas le propri√©taire de cette propri√©t√©" }, { status: 403 })
    }

    // R√©cup√©rer les donn√©es du corps de la requ√™te
    const { slots } = await request.json()

    if (!Array.isArray(slots)) {
      return NextResponse.json({ error: "Format de donn√©es invalide" }, { status: 400 })
    }

    console.log("üíæ Sauvegarde de", slots.length, "cr√©neaux")

    // Supprimer tous les cr√©neaux existants pour cette propri√©t√©
    const { error: deleteError } = await supabase.from("property_visit_slots").delete().eq("property_id", params.id)

    if (deleteError) {
      console.error("‚ùå Erreur lors de la suppression des cr√©neaux:", deleteError)
      return NextResponse.json(
        {
          error: "Erreur lors de la mise √† jour des cr√©neaux",
          details: deleteError.message,
        },
        { status: 500 },
      )
    }

    // Si aucun nouveau cr√©neau n'est fourni, terminer ici
    if (slots.length === 0) {
      console.log("‚úÖ Tous les cr√©neaux supprim√©s pour la propri√©t√©:", params.id)
      return NextResponse.json({
        message: "Tous les cr√©neaux ont √©t√© supprim√©s",
        slots: [],
      })
    }

    // Valider et pr√©parer les nouveaux cr√©neaux
    const validatedSlots = slots.map((slot: any) => ({
      property_id: params.id,
      date: slot.date,
      start_time: slot.start_time,
      end_time: slot.end_time,
      max_capacity: slot.max_capacity || 1,
      is_group_visit: slot.is_group_visit || false,
      current_bookings: slot.current_bookings || 0,
      is_available: slot.is_available !== false,
    }))

    console.log("üíæ Insertion des cr√©neaux valid√©s:", validatedSlots.length)

    // Ins√©rer les nouveaux cr√©neaux
    const { data: insertedSlots, error: insertError } = await supabase
      .from("property_visit_slots")
      .insert(validatedSlots)
      .select()

    if (insertError) {
      console.error("‚ùå Erreur lors de l'insertion des cr√©neaux:", insertError)
      console.error("‚ùå D√©tails de l'erreur:", JSON.stringify(insertError, null, 2))
      return NextResponse.json(
        {
          error: "Erreur lors de la sauvegarde des cr√©neaux",
          details: insertError.message,
        },
        { status: 500 },
      )
    }

    console.log("‚úÖ Cr√©neaux sauvegard√©s avec succ√®s:", insertedSlots?.length || 0)

    return NextResponse.json({
      message: `${insertedSlots?.length || 0} cr√©neaux sauvegard√©s avec succ√®s`,
      slots: insertedSlots,
    })
  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale lors de la sauvegarde des cr√©neaux:", error)
    return NextResponse.json(
      {
        error: "Erreur serveur",
        details: error instanceof Error ? error.message : "Erreur inconnue",
      },
      { status: 500 },
    )
  }
}
