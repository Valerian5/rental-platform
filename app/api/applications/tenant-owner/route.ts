import { type NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const tenantId = searchParams.get("tenant_id")
    const ownerId = searchParams.get("owner_id")

    if (!tenantId || !ownerId) {
      return NextResponse.json({ error: "tenant_id et owner_id sont requis" }, { status: 400 })
    }

    console.log("üîç Recherche candidatures:", { tenantId, ownerId })

    // Utilisons exactement la m√™me approche que l'API de d√©bogage qui fonctionne

    // √âtape 1: R√©cup√©rer les candidatures du tenant
    const { data: tenantApplications, error: tenantError } = await supabase
      .from("applications")
      .select("*")
      .eq("tenant_id", tenantId)

    if (tenantError) {
      console.error("‚ùå Erreur r√©cup√©ration candidatures tenant:", tenantError)
      return NextResponse.json({ error: "Erreur lors de la r√©cup√©ration des candidatures" }, { status: 500 })
    }

    console.log("üìã Candidatures du tenant:", tenantApplications?.length || 0)

    // √âtape 2: R√©cup√©rer les propri√©t√©s du propri√©taire
    const { data: ownerProperties, error: ownerError } = await supabase
      .from("properties")
      .select("*")
      .eq("owner_id", ownerId)

    if (ownerError) {
      console.error("‚ùå Erreur r√©cup√©ration propri√©t√©s owner:", ownerError)
      return NextResponse.json({ error: "Erreur lors de la r√©cup√©ration des propri√©t√©s" }, { status: 500 })
    }

    console.log("üè† Propri√©t√©s du propri√©taire:", ownerProperties?.length || 0)

    // √âtape 3: Filtrer les candidatures pour ne garder que celles qui concernent les propri√©t√©s du propri√©taire
    const propertyIds = ownerProperties.map((p) => p.id)

    const filteredApplications = tenantApplications.filter((app) => propertyIds.includes(app.property_id))

    console.log("üìã Candidatures filtr√©es:", filteredApplications.length)

    // √âtape 4: Enrichir les candidatures avec les informations des propri√©t√©s
    const enrichedApplications = filteredApplications.map((app) => {
      const property = ownerProperties.find((p) => p.id === app.property_id)

      // Extraire seulement les champs n√©cessaires de la propri√©t√©
      const simplifiedProperty = property
        ? {
            id: property.id,
            title: property.title,
            address: property.address,
            city: property.city,
            price: property.price,
            images: property.images,
          }
        : null

      return {
        id: app.id,
        status: app.status,
        created_at: app.created_at,
        message: app.message,
        property: simplifiedProperty,
      }
    })

    return NextResponse.json({
      applications: enrichedApplications,
      count: enrichedApplications.length,
    })
  } catch (error) {
    console.error("‚ùå Erreur API candidatures tenant-owner:", error)
    return NextResponse.json(
      {
        error: "Erreur serveur",
        details: error instanceof Error ? error.message : "Erreur inconnue",
      },
      { status: 500 },
    )
  }
}
