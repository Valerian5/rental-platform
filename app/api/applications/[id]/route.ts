import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  throw new Error("Variables d'environnement Supabase manquantes")
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const { id } = params

    console.log("üîç Recherche candidature ID:", id)

    // R√©cup√©rer la candidature avec les informations du tenant et de la propri√©t√©
    const { data: application, error } = await supabase
      .from("applications")
      .select(`
        *,
        property:properties(*),
        tenant:users(*)
      `)
      .eq("id", id)
      .single()

    if (error) {
      console.error("‚ùå Erreur r√©cup√©ration candidature:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Candidature trouv√©e:", application?.id)
    return NextResponse.json({ application })
  } catch (error) {
    console.error("‚ùå Erreur serveur:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}

export async function PATCH(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const { id } = params
    const body = await request.json()
    const { status, notes } = body

    console.log("üîÑ Mise √† jour candidature:", id, "nouveau statut:", status)

    const updateData: any = {
      status,
      updated_at: new Date().toISOString(),
    }

    if (notes) {
      updateData.notes = notes
    }

    const { data, error } = await supabase.from("applications").update(updateData).eq("id", id).select().single()

    if (error) {
      console.error("‚ùå Erreur mise √† jour candidature:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Candidature mise √† jour:", data?.id)
    return NextResponse.json({ success: true, application: data })
  } catch (error) {
    console.error("‚ùå Erreur serveur:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}

export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const { id } = params

    console.log("üóëÔ∏è Suppression candidature:", id)

    // V√©rifier que la candidature existe
    const { data: application, error: checkError } = await supabase
      .from("applications")
      .select("id, status, tenant_id")
      .eq("id", id)
      .single()

    if (checkError || !application) {
      console.error("‚ùå Candidature non trouv√©e:", checkError)
      return NextResponse.json({ error: "Candidature non trouv√©e" }, { status: 404 })
    }

    // V√©rifier que la candidature peut √™tre supprim√©e
    if (application.status === "accepted") {
      return NextResponse.json({ error: "Impossible de supprimer une candidature accept√©e" }, { status: 400 })
    }

    // Supprimer les cr√©neaux de visite associ√©s
    const { error: slotsError } = await supabase.from("visit_slots").delete().eq("application_id", id)

    if (slotsError) {
      console.error("‚ùå Erreur suppression cr√©neaux:", slotsError)
      // On continue m√™me si la suppression des cr√©neaux √©choue
    }

    // Marquer la candidature comme retir√©e au lieu de la supprimer
    const { data, error } = await supabase
      .from("applications")
      .update({
        status: "withdrawn",
        updated_at: new Date().toISOString(),
      })
      .eq("id", id)
      .select()
      .single()

    if (error) {
      console.error("‚ùå Erreur retrait candidature:", error)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    console.log("‚úÖ Candidature retir√©e:", data?.id)
    return NextResponse.json({ success: true, message: "Candidature retir√©e avec succ√®s" })
  } catch (error) {
    console.error("‚ùå Erreur serveur:", error)
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 })
  }
}
