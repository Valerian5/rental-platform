import { NextRequest, NextResponse } from "next/server"
import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  throw new Error("Variables d'environnement Supabase manquantes")
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function POST(request: NextRequest) {
  try {
    console.log("üîç V√©rification des utilisateurs admin...")
    
    // V√©rifier s'il existe d√©j√† un admin
    const { data: existingAdmins, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('user_type', 'admin')
    
    if (checkError) {
      console.error('‚ùå Erreur v√©rification admin:', checkError)
      return NextResponse.json({ 
        success: false, 
        message: "Erreur v√©rification admin: " + checkError.message 
      })
    }
    
    if (existingAdmins && existingAdmins.length > 0) {
      return NextResponse.json({ 
        success: true, 
        message: `Admin existant trouv√©: ${existingAdmins[0].email}`,
        admin: existingAdmins[0]
      })
    }
    
    console.log('‚ùå Aucun admin trouv√©. Cr√©ation d\'un admin par d√©faut...')
    
    // Cr√©er un utilisateur admin par d√©faut
    const adminEmail = 'admin@louer-ici.com'
    const adminPassword = 'admin123456'
    
    // Cr√©er l'utilisateur dans Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: adminEmail,
      password: adminPassword,
      email_confirm: true
    })
    
    if (authError) {
      console.error('‚ùå Erreur cr√©ation auth:', authError)
      return NextResponse.json({ 
        success: false, 
        message: "Erreur cr√©ation auth: " + authError.message 
      })
    }
    
    // Cr√©er le profil dans la table users
    const { data: profile, error: profileError } = await supabase
      .from('users')
      .insert({
        id: authData.user.id,
        email: adminEmail,
        first_name: 'Admin',
        last_name: 'System',
        user_type: 'admin',
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single()
    
    if (profileError) {
      console.error('‚ùå Erreur cr√©ation profil:', profileError)
      return NextResponse.json({ 
        success: false, 
        message: "Erreur cr√©ation profil: " + profileError.message 
      })
    }
    
    console.log('‚úÖ Admin cr√©√© avec succ√®s!')
    
    return NextResponse.json({ 
      success: true, 
      message: `Admin cr√©√© avec succ√®s! Email: ${adminEmail}, Mot de passe: ${adminPassword}`,
      admin: profile
    })
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
    return NextResponse.json({ 
      success: false, 
      message: "Erreur: " + (error instanceof Error ? error.message : 'Erreur inconnue')
    })
  }
}
