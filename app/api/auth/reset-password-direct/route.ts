import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@/lib/supabase'
import bcrypt from 'bcryptjs'

export async function POST(request: NextRequest) {
  try {
    const { email, newPassword } = await request.json()

    if (!email || !newPassword) {
      return NextResponse.json(
        { error: 'Email et nouveau mot de passe requis' },
        { status: 400 }
      )
    }

    console.log("üîÑ R√©initialisation directe pour:", email)

    // V√©rifier que l'utilisateur existe
    const supabase = createServerClient()
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, email, first_name')
      .eq('email', email)
      .single()

    if (userError || !user) {
      console.log("‚ùå Utilisateur non trouv√©:", email)
      return NextResponse.json(
        { error: 'Utilisateur non trouv√©' },
        { status: 404 }
      )
    }

    console.log("‚úÖ Utilisateur trouv√©:", user.email)

    // Hasher le nouveau mot de passe
    const saltRounds = 12
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds)

    // Mettre √† jour le mot de passe dans la base de donn√©es
    const { error: updateError } = await supabase
      .from('users')
      .update({ 
        password_hash: hashedPassword,
        updated_at: new Date().toISOString()
      })
      .eq('id', user.id)

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour mot de passe:', updateError)
      return NextResponse.json(
        { error: 'Erreur lors de la mise √† jour du mot de passe' },
        { status: 500 }
      )
    }

    console.log("‚úÖ Mot de passe mis √† jour pour:", user.email)

    // Optionnel : Mettre √† jour le mot de passe dans Supabase Auth
    try {
      const { error: authError } = await supabase.auth.admin.updateUserById(
        user.id,
        { password: newPassword }
      )
      
      if (authError) {
        console.warn('‚ö†Ô∏è Erreur synchronisation Supabase Auth:', authError)
        // Ne pas faire √©chouer la requ√™te si la sync √©choue
      } else {
        console.log("‚úÖ Synchronisation Supabase Auth r√©ussie")
      }
    } catch (syncError) {
      console.warn('‚ö†Ô∏è Erreur synchronisation auth:', syncError)
      // Continuer m√™me si la synchronisation √©choue
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Mot de passe r√©initialis√© avec succ√®s' 
    })

  } catch (error) {
    console.error('‚ùå Erreur API reset password direct:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
