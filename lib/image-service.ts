import { supabase } from "./supabase"

export const imageService = {
  // Upload d'une image vers Supabase Storage
  async uploadPropertyImage(file: File, propertyId: string): Promise<string> {
    console.log("üì∏ ImageService.uploadPropertyImage - D√©but", { fileName: file.name, propertyId })

    try {
      // G√©n√©rer un nom de fichier unique
      const fileExt = file.name.split(".").pop()
      const fileName = `${propertyId}/${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`

      console.log("üìÅ Nom de fichier g√©n√©r√©:", fileName)

      // Upload vers Supabase Storage
      const { data, error } = await supabase.storage.from("property-images").upload(fileName, file, {
        cacheControl: "3600",
        upsert: false,
      })

      if (error) {
        console.error("‚ùå Erreur lors de l'upload:", error)
        throw new Error(`Erreur upload: ${error.message}`)
      }

      console.log("‚úÖ Fichier upload√©:", data)

      // Obtenir l'URL publique
      const { data: urlData } = supabase.storage.from("property-images").getPublicUrl(fileName)

      const publicUrl = urlData.publicUrl
      console.log("üîó URL publique g√©n√©r√©e:", publicUrl)

      return publicUrl
    } catch (error) {
      console.error("‚ùå Erreur dans uploadPropertyImage:", error)
      throw error
    }
  },

  // Sauvegarder les m√©tadonn√©es d'une image en base
  async savePropertyImageMetadata(propertyId: string, url: string, isPrimary = false) {
    console.log("üíæ ImageService.savePropertyImageMetadata", { propertyId, url, isPrimary })

    try {
      // Si c'est l'image principale, d√©sactiver les autres images principales
      if (isPrimary) {
        await supabase.from("property_images").update({ is_primary: false }).eq("property_id", propertyId)
      }

      // Ins√©rer la nouvelle image
      const { data, error } = await supabase
        .from("property_images")
        .insert({
          property_id: propertyId,
          url: url,
          is_primary: isPrimary,
        })
        .select()
        .single()

      if (error) {
        console.error("‚ùå Erreur lors de la sauvegarde des m√©tadonn√©es:", error)
        throw new Error(`Erreur sauvegarde m√©tadonn√©es: ${error.message}`)
      }

      console.log("‚úÖ M√©tadonn√©es sauvegard√©es:", data)
      return data
    } catch (error) {
      console.error("‚ùå Erreur dans savePropertyImageMetadata:", error)
      throw error
    }
  },

  // Supprimer une image
  async deletePropertyImage(imageId: string, imageUrl: string) {
    console.log("üóëÔ∏è ImageService.deletePropertyImage", { imageId, imageUrl })

    try {
      // Extraire le chemin du fichier depuis l'URL
      const urlParts = imageUrl.split("/")
      const fileName = urlParts[urlParts.length - 2] + "/" + urlParts[urlParts.length - 1]

      // Supprimer le fichier du storage
      const { error: storageError } = await supabase.storage.from("property-images").remove([fileName])

      if (storageError) {
        console.warn("‚ö†Ô∏è Erreur lors de la suppression du fichier:", storageError)
        // On continue m√™me si la suppression du fichier √©choue
      }

      // Supprimer les m√©tadonn√©es de la base
      const { error: dbError } = await supabase.from("property_images").delete().eq("id", imageId)

      if (dbError) {
        console.error("‚ùå Erreur lors de la suppression des m√©tadonn√©es:", dbError)
        throw new Error(`Erreur suppression m√©tadonn√©es: ${dbError.message}`)
      }

      console.log("‚úÖ Image supprim√©e avec succ√®s")
      return true
    } catch (error) {
      console.error("‚ùå Erreur dans deletePropertyImage:", error)
      throw error
    }
  },

  // R√©cup√©rer les images d'une propri√©t√©
  async getPropertyImages(propertyId: string) {
    console.log("üì∏ ImageService.getPropertyImages - ID:", propertyId)

    try {
      const { data, error } = await supabase
        .from("property_images")
        .select("*")
        .eq("property_id", propertyId)
        .order("is_primary", { ascending: false })
        .order("created_at", { ascending: true })

      if (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des images:", error)
        throw new Error(error.message)
      }

      console.log("‚úÖ Images r√©cup√©r√©es:", data?.length || 0)
      return data || []
    } catch (error) {
      console.error("‚ùå Erreur dans getPropertyImages:", error)
      return []
    }
  },
}