import { supabase, createServerClient } from "./supabase"

export interface Notification {
  id: string
  user_id: string
  title: string
  content: string
  type: string
  read: boolean | null
  action_url: string | null
  created_at: string
}

export const notificationsService = {
  async getUserNotifications(userId: string, unreadOnly = false): Promise<Notification[]> {
    console.log("üîî NotificationsService.getUserNotifications", { userId, unreadOnly })

    try {
      const db = typeof window === "undefined" ? createServerClient() : supabase
      let query = db
        .from("notifications")
        .select("*")
        .eq("user_id", userId)
        .order("created_at", { ascending: false })

      if (unreadOnly) {
        query = query.or("read.is.null,read.eq.false")
      }

      const { data, error } = await query

      if (error) {
        console.error("‚ùå Erreur r√©cup√©ration notifications:", error)
        throw new Error(`Erreur base de donn√©es: ${error.message}`)
      }

      console.log(`‚úÖ ${data?.length || 0} notifications r√©cup√©r√©es pour l'utilisateur ${userId}`)

      // Transformer les donn√©es pour s'assurer que read est un boolean
      const transformedData = (data || []).map((notification) => ({
        ...notification,
        read: notification.read === true,
      }))

      return transformedData as Notification[]
    } catch (error) {
      console.error("‚ùå Erreur dans getUserNotifications:", error)
      throw error
    }
  },

  async getUnreadCount(userId: string): Promise<number> {
    console.log("üîî NotificationsService.getUnreadCount", userId)

    try {
      const db = typeof window === "undefined" ? createServerClient() : supabase
      const { count, error } = await db
        .from("notifications")
        .select("id", { count: "exact", head: true })
        .eq("user_id", userId)
        .or("read.is.null,read.eq.false")

      if (error) {
        console.error("‚ùå Erreur comptage non lues:", error)
        throw new Error(`Erreur comptage: ${error.message}`)
      }

      console.log(`‚úÖ ${count || 0} notifications non lues pour l'utilisateur ${userId}`)
      return count || 0
    } catch (error) {
      console.error("‚ùå Erreur dans getUnreadCount:", error)
      return 0
    }
  },

  async createNotification(userId: string, notificationData: Partial<Notification>): Promise<Notification> {
    console.log("üîî NotificationsService.createNotification", { userId, notificationData })

    try {
      const db = typeof window === "undefined" ? createServerClient() : supabase
      const { data, error } = await db
        .from("notifications")
        .insert({
          user_id: userId,
          title: notificationData.title,
          content: notificationData.content,
          type: notificationData.type,
          action_url: notificationData.action_url,
          read: false,
          created_at: new Date().toISOString(),
        })
        .select()
        .single()

      if (error) {
        console.error("‚ùå Erreur cr√©ation notification:", error)
        throw new Error(`Erreur cr√©ation: ${error.message}`)
      }

      console.log("‚úÖ Notification cr√©√©e:", data.id)
      return data as Notification
    } catch (error) {
      console.error("‚ùå Erreur dans createNotification:", error)
      throw error
    }
  },

  async markAsRead(notificationId: string): Promise<void> {
    console.log("üîî NotificationsService.markAsRead", notificationId)

    try {
      const db = typeof window === "undefined" ? createServerClient() : supabase
      const { error } = await db
        .from("notifications")
        .update({ read: true })
        .eq("id", notificationId)

      if (error) {
        console.error("‚ùå Erreur marquage notification:", error)
        throw new Error(`Erreur marquage: ${error.message}`)
      }

      console.log("‚úÖ Notification marqu√©e comme lue")
    } catch (error) {
      console.error("‚ùå Erreur dans markAsRead:", error)
      throw error
    }
  },

  async markAllAsRead(userId: string): Promise<void> {
    console.log("üîî NotificationsService.markAllAsRead", userId)

    try {
      const db = typeof window === "undefined" ? createServerClient() : supabase
      const { error } = await db
        .from("notifications")
        .update({ read: true })
        .eq("user_id", userId)
        .or("read.is.null,read.eq.false")

      if (error) {
        console.error("‚ùå Erreur marquage toutes notifications:", error)
        throw new Error(`Erreur marquage toutes: ${error.message}`)
      }

      console.log("‚úÖ Toutes les notifications marqu√©es comme lues")
    } catch (error) {
      console.error("‚ùå Erreur dans markAllAsRead:", error)
      throw error
    }
  },

  async deleteNotification(notificationId: string): Promise<void> {
    console.log("üîî NotificationsService.deleteNotification", notificationId)

    try {
      const db = typeof window === "undefined" ? createServerClient() : supabase
      const { error } = await db.from("notifications").delete().eq("id", notificationId)

      if (error) {
        console.error("‚ùå Erreur suppression notification:", error)
        throw new Error(`Erreur suppression: ${error.message}`)
      }

      console.log("‚úÖ Notification supprim√©e")
    } catch (error) {
      console.error("‚ùå Erreur dans deleteNotification:", error)
      throw error
    }
  },

  // M√©thodes sp√©cifiques pour les r√©gularisations et r√©visions
  async createChargeRegularizationNotification(
    tenantId: string, 
    year: number, 
    balance: number, 
    pdfUrl: string
  ): Promise<Notification> {
    console.log("üîî NotificationsService.createChargeRegularizationNotification", { tenantId, year, balance })

    const balanceType = balance >= 0 ? 'additional_payment' : 'refund'
    const notificationData = {
      regularization_id: 'temp', // Sera remplac√© par l'ID r√©el
      year: year,
      pdf_url: pdfUrl,
      balance: balance,
      balance_type: balanceType
    }

    return this.createNotification(tenantId, {
      type: 'charge_regularization',
      title: `R√©gularisation des charges ${year}`,
      content: `Votre propri√©taire vous a envoy√© la r√©gularisation des charges pour l'ann√©e ${year}.`,
      action_url: `${pdfUrl}?data=${encodeURIComponent(JSON.stringify(notificationData))}`
    })
  },

  async createRentRevisionNotification(
    tenantId: string, 
    year: number, 
    newRent: number, 
    increasePercentage: number, 
    pdfUrl: string
  ): Promise<Notification> {
    console.log("üîî NotificationsService.createRentRevisionNotification", { tenantId, year, newRent, increasePercentage })

    const notificationData = {
      revision_id: 'temp', // Sera remplac√© par l'ID r√©el
      year: year,
      pdf_url: pdfUrl,
      new_rent: newRent,
      increase_percentage: increasePercentage
    }

    return this.createNotification(tenantId, {
      type: 'rent_revision',
      title: `R√©vision de loyer ${year}`,
      content: `Votre propri√©taire vous a envoy√© la r√©vision de loyer pour l'ann√©e ${year}.`,
      action_url: `${pdfUrl}?data=${encodeURIComponent(JSON.stringify(notificationData))}`
    })
  },

  // Notifications pour les candidatures
  async notifyNewApplication(applicationData: any, propertyData: any, tenantData: any, ownerData: any) {
    console.log("üîî Notification nouvelle candidature")

    const tenantName = `${tenantData.first_name || ""} ${tenantData.last_name || ""}`.trim() || "Un locataire"
    const propertyTitle = propertyData.title || "votre bien"

    await this.createNotification(ownerData.id, {
      title: "Nouvelle candidature",
      content: `${tenantName} a postul√© pour ${propertyTitle}`,
      type: "application_received",
      action_url: `/owner/applications/${applicationData.id}`,
    })
  },

  // Notifications pour les changements de statut de candidature
  async notifyApplicationStatusChange(
    applicationData: any,
    newStatus: string,
    tenantData: any,
    ownerData: any,
    propertyData: any,
  ) {
    console.log("üîî Notification changement statut candidature", newStatus)

    const statusMessages = {
      accepted: "Votre candidature a √©t√© accept√©e",
      rejected: "Votre candidature a √©t√© refus√©e",
      pending: "Votre candidature est en cours d'examen",
      shortlisted: "Votre candidature a √©t√© pr√©s√©lectionn√©e",
      interview_scheduled: "Un entretien a √©t√© programm√© pour votre candidature",
    }

    const message =
      statusMessages[newStatus as keyof typeof statusMessages] || "Le statut de votre candidature a chang√©"

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Mise √† jour de candidature",
      content: `${message} pour ${propertyData.title}`,
      type: "application_status_change",
      action_url: `/tenant/applications/${applicationData.id}`,
    })

    // Notification au propri√©taire si accept√©e
    if (newStatus === "accepted") {
      await this.createNotification(ownerData.id, {
        title: "Candidature accept√©e",
        content: `Vous avez accept√© la candidature de ${tenantData.first_name} ${tenantData.last_name}`,
        type: "application_accepted",
        action_url: `/owner/applications/${applicationData.id}`,
      })
    }
  },

  // Notifications pour les documents
  async notifyDocumentValidated(documentData: any, userData: any, validatorData: any) {
    console.log("üîî Notification document valid√©")

    await this.createNotification(userData.id, {
      title: "Document valid√©",
      content: `Votre document "${documentData.name}" a √©t√© valid√©`,
      type: "document_validated",
      action_url: `/tenant/documents`,
    })
  },

  async notifyDocumentRejected(documentData: any, userData: any, validatorData: any, reason?: string) {
    console.log("üîî Notification document rejet√©")

    const reasonText = reason ? ` Raison: ${reason}` : ""

    await this.createNotification(userData.id, {
      title: "Document rejet√©",
      content: `Votre document "${documentData.name}" a √©t√© rejet√©.${reasonText}`,
      type: "document_rejected",
      action_url: `/tenant/documents`,
    })
  },

  async notifyDocumentUploaded(documentData: any, uploaderData: any, recipientData: any) {
    console.log("üîî Notification nouveau document")

    await this.createNotification(recipientData.id, {
      title: "Nouveau document",
      content: `${uploaderData.first_name} ${uploaderData.last_name} a ajout√© un document: ${documentData.name}`,
      type: "document_uploaded",
      action_url: `/owner/documents`,
    })
  },

  // Notifications pour les baux
  async notifyLeaseCreated(leaseData: any, tenantData: any, ownerData: any, propertyData: any) {
    console.log("üîî Notification bail cr√©√©")

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Bail g√©n√©r√©",
      content: `Votre bail pour ${propertyData.title} est pr√™t √† √™tre sign√©`,
      type: "lease_created",
      action_url: `/tenant/leases/${leaseData.id}`,
    })

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Bail cr√©√©",
      content: `Le bail pour ${propertyData.title} a √©t√© g√©n√©r√©`,
      type: "lease_created",
      action_url: `/owner/leases/${leaseData.id}`,
    })
  },

  async notifyLeaseSigned(
    leaseData: any,
    signerData: any,
    otherPartyData: any,
    propertyData: any,
    signerType: "tenant" | "owner",
  ) {
    console.log("üîî Notification bail sign√©", signerType)

    const signerName = `${signerData.first_name} ${signerData.last_name}`
    const signerTypeText = signerType === "tenant" ? "locataire" : "propri√©taire"

    // Notification √† l'autre partie
    await this.createNotification(otherPartyData.id, {
      title: "Bail sign√©",
      content: `${signerName} (${signerTypeText}) a sign√© le bail pour ${propertyData.title}`,
      type: "lease_signed",
      action_url: signerType === "tenant" ? `/owner/leases/${leaseData.id}` : `/tenant/leases/${leaseData.id}`,
    })
  },

  async notifyLeaseFullySigned(leaseData: any, tenantData: any, ownerData: any, propertyData: any) {
    console.log("üîî Notification bail enti√®rement sign√©")

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Bail finalis√©",
      content: `Le bail pour ${propertyData.title} est maintenant enti√®rement sign√©`,
      type: "lease_completed",
      action_url: `/tenant/leases/${leaseData.id}`,
    })

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Bail finalis√©",
      content: `Le bail pour ${propertyData.title} est maintenant enti√®rement sign√©`,
      type: "lease_completed",
      action_url: `/owner/leases/${leaseData.id}`,
    })
  },

  // Notifications pour les paiements et rappels
  async notifyPaymentReceived(paymentData: any, tenantData: any, ownerData: any, propertyData: any) {
    console.log("üîî Notification paiement re√ßu")

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Paiement re√ßu",
      content: `Paiement de ${paymentData.amount}‚Ç¨ re√ßu pour ${propertyData.title}`,
      type: "payment_received",
      action_url: `/owner/rental-management/payments`,
    })

    // Notification au locataire (confirmation)
    await this.createNotification(tenantData.id, {
      title: "Paiement confirm√©",
      content: `Votre paiement de ${paymentData.amount}‚Ç¨ a √©t√© confirm√©`,
      type: "payment_confirmed",
      action_url: `/tenant/payments`,
    })
  },

  async notifyPaymentDue(paymentData: any, tenantData: any, propertyData: any) {
    console.log("üîî Notification √©ch√©ance de paiement")

    const dueDate = new Date(paymentData.due_date).toLocaleDateString("fr-FR")

    await this.createNotification(tenantData.id, {
      title: "√âch√©ance de loyer",
      content: `Votre loyer de ${paymentData.amount}‚Ç¨ est d√ª le ${dueDate}`,
      type: "payment_due",
      action_url: `/tenant/payments`,
    })
  },

  async notifyPaymentOverdue(paymentData: any, tenantData: any, ownerData: any, propertyData: any) {
    console.log("üîî Notification paiement en retard")

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Loyer en retard",
      content: `Votre loyer de ${paymentData.amount}‚Ç¨ est en retard`,
      type: "payment_overdue",
      action_url: `/tenant/payments`,
    })

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Loyer en retard",
      content: `Le loyer de ${tenantData.first_name} ${tenantData.last_name} est en retard`,
      type: "payment_overdue",
      action_url: `/owner/rental-management/payments`,
    })
  },

  // Notifications pour les visites
  async notifyVisitScheduled(visitData: any, propertyData: any, tenantData: any, ownerData: any) {
    console.log("üîî Notification visite programm√©e")

    const visitDate = new Date(visitData.visit_date).toLocaleDateString("fr-FR", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Visite confirm√©e",
      content: `Votre visite pour ${propertyData.title} est confirm√©e le ${visitDate}`,
      type: "visit_scheduled",
      action_url: `/tenant/visits`,
    })

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Visite programm√©e",
      content: `Une visite est programm√©e pour ${propertyData.title} le ${visitDate}`,
      type: "visit_scheduled",
      action_url: `/owner/visits`,
    })
  },

  async notifyVisitCancelled(
    visitData: any,
    tenantData: any,
    ownerData: any,
    propertyData: any,
    cancelledBy: "tenant" | "owner",
  ) {
    console.log("üîî Notification visite annul√©e")

    const visitDate = new Date(visitData.visit_date).toLocaleDateString("fr-FR", {
      weekday: "long",
      day: "numeric",
      month: "long",
      hour: "2-digit",
      minute: "2-digit",
    })

    if (cancelledBy === "tenant") {
      // Notification au propri√©taire
      await this.createNotification(ownerData.id, {
        title: "Visite annul√©e",
        content: `${tenantData.first_name} ${tenantData.last_name} a annul√© la visite du ${visitDate}`,
        type: "visit_cancelled",
        action_url: `/owner/visits`,
      })
    } else {
      // Notification au locataire
      await this.createNotification(tenantData.id, {
        title: "Visite annul√©e",
        content: `La visite du ${visitDate} pour ${propertyData.title} a √©t√© annul√©e`,
        type: "visit_cancelled",
        action_url: `/tenant/visits`,
      })
    }
  },

  async notifyVisitCompleted(visitData: any, tenantData: any, ownerData: any, propertyData: any) {
    console.log("üîî Notification visite termin√©e")

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Visite termin√©e",
      content: `La visite avec ${tenantData.first_name} ${tenantData.last_name} s'est termin√©e`,
      type: "visit_completed",
      action_url: `/owner/applications`,
    })

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Merci pour votre visite",
      content: `Merci d'avoir visit√© ${propertyData.title}. Vous pouvez maintenant postuler.`,
      type: "visit_completed",
      action_url: `/properties/${propertyData.id}`,
    })
  },

  // Notifications pour les propri√©t√©s
  async notifyPropertyStatusChange(propertyData: any, newStatus: string, ownerData: any) {
    console.log("üîî Notification changement statut propri√©t√©")

    const statusMessages = {
      available: "Votre bien est maintenant disponible √† la location",
      rented: "Votre bien a √©t√© lou√©",
      maintenance: "Votre bien est en maintenance",
      unavailable: "Votre bien n'est plus disponible",
    }

    const message = statusMessages[newStatus as keyof typeof statusMessages] || "Le statut de votre bien a chang√©"

    await this.createNotification(ownerData.id, {
      title: "Statut de propri√©t√©",
      content: `${message}: ${propertyData.title}`,
      type: "property_status_change",
      action_url: `/owner/properties/${propertyData.id}`,
    })
  },

  // Notifications pour les incidents et maintenance
  async notifyIncidentReported(incidentData: any, tenantData: any, ownerData: any, propertyData: any) {
    console.log("üîî Notification incident signal√©")

    // Notification au propri√©taire
    await this.createNotification(ownerData.id, {
      title: "Incident signal√©",
      content: `${tenantData.first_name} ${tenantData.last_name} a signal√© un incident: ${incidentData.title}`,
      type: "incident_reported",
      action_url: `/owner/incidents/${incidentData.id}`,
    })

    // Confirmation au locataire
    await this.createNotification(tenantData.id, {
      title: "Incident enregistr√©",
      content: `Votre signalement "${incidentData.title}" a √©t√© transmis au propri√©taire`,
      type: "incident_confirmed",
      action_url: `/tenant/incidents/${incidentData.id}`,
    })
  },

  async notifyIncidentResolved(incidentData: any, tenantData: any, ownerData: any) {
    console.log("üîî Notification incident r√©solu")

    // Notification au locataire
    await this.createNotification(tenantData.id, {
      title: "Incident r√©solu",
      content: `L'incident "${incidentData.title}" a √©t√© r√©solu`,
      type: "incident_resolved",
      action_url: `/tenant/incidents/${incidentData.id}`,
    })
  },

  // Notifications pour les agences
  async notifyAgencyEvent(agencyId: string, eventType: string, eventData: any) {
    console.log("üîî Notification √©v√©nement agence", { agencyId, eventType })

    try {
      // R√©cup√©rer les utilisateurs de l'agence
      const { data: agencyUsers } = await supabase
        .from("user_agency_roles")
        .select(`
          user_id,
          role,
          users(id, first_name, last_name, email)
        `)
        .eq("agency_id", agencyId)

      if (!agencyUsers) return

      // Envoyer les notifications selon le type d'√©v√©nement et le r√¥le
      for (const agencyUser of agencyUsers) {
        const user = agencyUser.users
        if (!user) continue

        let shouldNotify = false
        let notificationData: any = {}

        switch (eventType) {
          case "new_property":
            shouldNotify = ["director", "manager"].includes(agencyUser.role)
            notificationData = {
              title: "Nouveau bien ajout√©",
              content: `Un nouveau bien a √©t√© ajout√© : ${eventData.propertyTitle}`,
              type: "agency_property",
              action_url: `/agency/properties/${eventData.propertyId}`,
            }
            break

          case "new_application":
            shouldNotify = true // Tous les r√¥les
            notificationData = {
              title: "Nouvelle candidature",
              content: `Nouvelle candidature re√ßue pour ${eventData.propertyTitle}`,
              type: "agency_application",
              action_url: `/agency/applications/${eventData.applicationId}`,
            }
            break

          case "visit_scheduled":
            shouldNotify = true // Tous les r√¥les
            notificationData = {
              title: "Visite programm√©e",
              content: `Visite programm√©e pour ${eventData.propertyTitle}`,
              type: "agency_visit",
              action_url: `/agency/visits`,
            }
            break
        }

        if (shouldNotify) {
          await this.createNotification(user.id, notificationData)
        }
      }
    } catch (error) {
      console.error("‚ùå Erreur notification agence:", error)
    }
  },

  async notifyAgencyNewProperty(agencyId: string, propertyData: any, ownerData: any) {
    await this.notifyAgencyEvent(agencyId, "new_property", {
      propertyId: propertyData.id,
      propertyTitle: propertyData.title,
      propertyAddress: `${propertyData.address}, ${propertyData.city}`,
      ownerName: `${ownerData.first_name} ${ownerData.last_name}`,
    })
  },

  async notifyAgencyNewApplication(agencyId: string, applicationData: any, propertyData: any, tenantData: any) {
    await this.notifyAgencyEvent(agencyId, "new_application", {
      applicationId: applicationData.id,
      propertyId: propertyData.id,
      propertyTitle: propertyData.title,
      tenantName: `${tenantData.first_name} ${tenantData.last_name}`,
      income: applicationData.income,
    })
  },

  async notifyAgencyVisitScheduled(agencyId: string, visitData: any, propertyData: any, tenantData: any) {
    await this.notifyAgencyEvent(agencyId, "visit_scheduled", {
      visitId: visitData.id,
      propertyId: propertyData.id,
      propertyTitle: propertyData.title,
      tenantName: `${tenantData.first_name} ${tenantData.last_name}`,
      visitDate: new Date(visitData.visit_date).toLocaleDateString("fr-FR"),
    })
  },

  // Notifications syst√®me
  async notifySystemMaintenance(userId: string, maintenanceData: any) {
    console.log("üîî Notification maintenance syst√®me")

    await this.createNotification(userId, {
      title: "Maintenance programm√©e",
      content: `Une maintenance est programm√©e le ${new Date(maintenanceData.scheduled_date).toLocaleDateString("fr-FR")}`,
      type: "system_maintenance",
      action_url: null,
    })
  },

  async notifyAccountUpdate(userId: string, updateType: string) {
    console.log("üîî Notification mise √† jour compte")

    const updateMessages = {
      profile_updated: "Votre profil a √©t√© mis √† jour",
      password_changed: "Votre mot de passe a √©t√© modifi√©",
      email_verified: "Votre adresse email a √©t√© v√©rifi√©e",
      account_verified: "Votre compte a √©t√© v√©rifi√©",
    }

    const message = updateMessages[updateType as keyof typeof updateMessages] || "Votre compte a √©t√© mis √† jour"

    await this.createNotification(userId, {
      title: "Compte mis √† jour",
      content: message,
      type: "account_update",
      action_url: `/settings`,
    })
  },

  // M√©thode utilitaire pour envoyer des notifications en masse
  async sendBulkNotifications(
    notifications: Array<{
      userId: string
      notificationData: Partial<Notification>
    }>,
  ) {
    console.log("üîî Envoi notifications en masse", notifications.length)

    const promises = notifications.map(({ userId, notificationData }) =>
      this.createNotification(userId, notificationData),
    )

    try {
      await Promise.all(promises)
      console.log("‚úÖ Toutes les notifications envoy√©es")
    } catch (error) {
      console.error("‚ùå Erreur envoi notifications en masse:", error)
      throw error
    }
  },

  // Notifications pour DocuSign
  async notifyDocuSignSignatureRequest(
    leaseData: any,
    signerData: any,
    propertyData: any,
    signerType: "tenant" | "owner",
    signingUrl: string,
  ) {
    console.log("üîî Notification demande signature DocuSign", signerType)

    const signerName = `${signerData.first_name} ${signerData.last_name}`

    await this.createNotification(signerData.id, {
      title: "Signature √©lectronique requise",
      content: `Votre bail pour ${propertyData.title} est pr√™t √† √™tre sign√©`,
      type: "docusign_signature_request",
      action_url: signingUrl,
    })
  },

  async notifyDocuSignSignatureCompleted(leaseData: any, allPartiesData: any, propertyData: any) {
    console.log("üîî Notification signature DocuSign compl√©t√©e")

    // Notify all parties that the lease is fully signed
    for (const party of allPartiesData) {
      await this.createNotification(party.id, {
        title: "Bail enti√®rement sign√©",
        content: `Le bail pour ${propertyData.title} a √©t√© sign√© par toutes les parties`,
        type: "docusign_completed",
        action_url: `/leases/${leaseData.id}`,
      })
    }
  },

  // Notifications pour le nouveau workflow de signatures
  async notifySignatureRequired(
    leaseId: string,
    userType: "owner" | "tenant",
    signatureMethod: "electronic" | "manual_physical" | "manual_remote",
    leaseData: any,
    propertyData: any
  ) {
    console.log("üîî Notification signature requise", { userType, signatureMethod })

    const isOwner = userType === "owner"
    const actionUrl = isOwner ? `/owner/leases/${leaseId}` : `/tenant/leases/${leaseId}`
    
    let title = ""
    let content = ""
    
    if (isOwner) {
      title = "Signature du bail requise"
      content = `Votre bail pour ${propertyData.title || propertyData.address} est pr√™t √† √™tre sign√©`
    } else {
      title = "Bail √† signer"
      content = `Le propri√©taire vous a envoy√© un bail √† signer pour ${propertyData.title || propertyData.address}`
    }

    await this.createNotification(leaseData[isOwner ? "owner_id" : "tenant_id"], {
      title,
      content,
      type: "signature_required",
      action_url: actionUrl,
    })
  },

  async notifySignatureCompleted(
    leaseId: string,
    userType: "owner" | "tenant",
    leaseData: any,
    propertyData: any
  ) {
    console.log("üîî Notification signature compl√©t√©e", { userType })

    const isOwner = userType === "owner"
    const otherPartyId = isOwner ? leaseData.tenant_id : leaseData.owner_id
    const otherPartyType = isOwner ? "tenant" : "owner"
    const actionUrl = isOwner ? `/owner/leases/${leaseId}` : `/tenant/leases/${leaseId}`
    
    // Notifier l'autre partie
    await this.createNotification(otherPartyId, {
      title: "Signature re√ßue",
      content: `Le ${otherPartyType === "owner" ? "propri√©taire" : "locataire"} a sign√© le bail pour ${propertyData.title || propertyData.address}`,
      type: "signature_received",
      action_url: actionUrl,
    })
  },

  async notifyFullySigned(
    leaseId: string,
    leaseData: any,
    propertyData: any
  ) {
    console.log("üîî Notification bail enti√®rement sign√©")

    const notifications = [
      {
        userId: leaseData.owner_id,
        notificationData: {
          title: "Bail sign√© par les deux parties",
          content: `Votre bail pour ${propertyData.title || propertyData.address} a √©t√© sign√© par toutes les parties`,
          type: "lease_fully_signed",
          action_url: `/owner/leases/${leaseId}`,
        },
      },
      {
        userId: leaseData.tenant_id,
        notificationData: {
          title: "Bail sign√© par les deux parties",
          content: `Votre bail pour ${propertyData.title || propertyData.address} a √©t√© sign√© par toutes les parties`,
          type: "lease_fully_signed",
          action_url: `/tenant/leases/${leaseId}`,
        },
      },
    ]

    await this.sendBulkNotifications(notifications)
  },
}
