import { supabase } from "./supabase"
import type { NextRequest } from "next/server"
import { createApiSupabaseClient, createServiceSupabaseClient } from "./supabase-server-client"

export interface UserProfile {
  id: string
  email: string
  first_name: string
  last_name: string
  phone?: string
  user_type: "tenant" | "owner" | "admin"
  agency_id?: string
  created_at: string
  updated_at: string
}

export interface RegisterData {
  email: string
  password: string
  firstName: string
  lastName: string
  phone?: string
  userType: "tenant" | "owner"
}

// Fonction pour API routes - version corrig√©e
export async function getCurrentUserFromRequest(request: NextRequest): Promise<UserProfile | null> {
  try {
    console.log("üîç getCurrentUserFromRequest - D√©but")

    // Lister tous les cookies disponibles
    const allCookies = request.cookies.getAll()
    console.log(
      "üç™ Tous les cookies:",
      allCookies.map((c) => ({ name: c.name, hasValue: !!c.value })),
    )

    // Chercher sp√©cifiquement les cookies Supabase
    const supabaseCookies = allCookies.filter((c) => c.name.includes("supabase") || c.name.includes("sb-"))
    console.log(
      "üîë Cookies Supabase:",
      supabaseCookies.map((c) => ({ name: c.name, hasValue: !!c.value })),
    )

    // Cr√©er le client Supabase pour API
    const supabase = createApiSupabaseClient(request)

    // R√©cup√©rer l'utilisateur authentifi√©
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()

    if (authError) {
      console.error("‚ùå Erreur auth:", authError)
      return null
    }

    if (!user) {
      console.log("‚ùå Pas d'utilisateur authentifi√©")
      return null
    }

    console.log("üë§ Utilisateur trouv√©:", user.id)

    // Utiliser le client service pour r√©cup√©rer le profil (√©vite les probl√®mes RLS)
    const serviceSupabase = createServiceSupabaseClient()
    const { data: profile, error: profileError } = await serviceSupabase
      .from("users")
      .select("*")
      .eq("id", user.id)
      .single()

    if (profileError) {
      console.error("‚ùå Erreur profil:", profileError)
      return null
    }

    console.log("‚úÖ Profil r√©cup√©r√©:", profile.user_type)
    return profile
  } catch (error) {
    console.error("‚ùå Erreur dans getCurrentUserFromRequest:", error)
    return null
  }
}

export const authService = {
  // Inscription avec cr√©ation du profil
  async register(userData: RegisterData): Promise<UserProfile> {
    console.log("üîê AuthService.register", userData)

    try {
      // 1. Cr√©er le compte Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
      })

      if (authError) {
        console.error("‚ùå Erreur cr√©ation compte:", authError)
        throw new Error(authError.message)
      }

      if (!authData.user) {
        throw new Error("Erreur lors de la cr√©ation du compte")
      }

      // 2. Cr√©er le profil utilisateur
      const profileData = {
        id: authData.user.id,
        email: userData.email,
        first_name: userData.firstName,
        last_name: userData.lastName,
        phone: userData.phone || null,
        user_type: userData.userType,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }

      const { data: profile, error: profileError } = await supabase.from("users").insert(profileData).select().single()

      if (profileError) {
        console.error("‚ùå Erreur cr√©ation profil:", profileError)
        // Supprimer le compte auth si la cr√©ation du profil √©choue
        await supabase.auth.signOut()
        throw new Error("Erreur lors de la cr√©ation du profil: " + profileError.message)
      }

      // 3. Si c'est un locataire, initialiser le dossier de location
      if (userData.userType === "tenant") {
        try {
          await supabase.from("rental_files").insert({
            tenant_id: authData.user.id,
            completion_percentage: 0,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          })
        } catch (rentalFileError) {
          console.warn("‚ö†Ô∏è Erreur initialisation dossier location:", rentalFileError)
          // Ne pas faire √©chouer l'inscription pour √ßa
        }
      }

      console.log("‚úÖ Inscription r√©ussie:", profile)
      return profile
    } catch (error) {
      console.error("‚ùå Erreur dans register:", error)
      throw error
    }
  },

  // Connexion
  async login(email: string, password: string): Promise<{ user: UserProfile | null; session: any }> {
    console.log("üîê AuthService.login", email)

    try {
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      if (authError) {
        console.error("‚ùå Erreur connexion:", authError)
        throw new Error(authError.message)
      }

      if (!authData.user || !authData.session) {
        throw new Error("Erreur lors de la connexion")
      }

      console.log("‚úÖ Auth r√©ussie, r√©cup√©ration du profil...")

      // Attendre un peu pour que la session soit bien √©tablie
      await new Promise((resolve) => setTimeout(resolve, 500))

      // R√©cup√©rer le profil utilisateur
      const { data: profile, error: profileError } = await supabase
        .from("users")
        .select("*")
        .eq("id", authData.user.id)
        .single()

      if (profileError) {
        console.error("‚ùå Erreur r√©cup√©ration profil:", profileError)
        throw new Error("Erreur lors de la r√©cup√©ration du profil")
      }

      console.log("‚úÖ Connexion compl√®te r√©ussie:", profile)
      return { user: profile, session: authData.session }
    } catch (error) {
      console.error("‚ùå Erreur dans login:", error)
      throw error
    }
  },

  // R√©cup√©rer l'utilisateur actuel
  async getCurrentUser(): Promise<UserProfile | null> {
    try {
      console.log("üîç AuthService.getCurrentUser - D√©but")

      // 1. V√©rifier la session Supabase
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession()
      console.log("üìã Session:", { sessionData, sessionError })

      if (sessionError) {
        console.error("‚ùå Erreur session:", sessionError)
        return null
      }

      if (!sessionData.session || !sessionData.session.user) {
        console.log("‚ùå Pas de session active")
        return null
      }

      const userId = sessionData.session.user.id
      console.log("üë§ User ID:", userId)

      // 2. R√©cup√©rer le profil utilisateur
      const { data: profile, error: profileError } = await supabase.from("users").select("*").eq("id", userId).single()

      console.log("üìä Profil:", { profile, profileError })

      if (profileError) {
        console.error("‚ùå Erreur profil:", profileError)

        // Si le profil n'existe pas, cr√©er un profil basique
        if (profileError.code === "PGRST116") {
          console.log("üîß Cr√©ation profil manquant...")
          const basicProfile = {
            id: userId,
            email: sessionData.session.user.email || "",
            first_name: sessionData.session.user.user_metadata?.first_name || "",
            last_name: sessionData.session.user.user_metadata?.last_name || "",
            user_type: sessionData.session.user.user_metadata?.user_type || "tenant",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          }

          const { data: newProfile, error: createError } = await supabase
            .from("users")
            .insert(basicProfile)
            .select()
            .single()

          if (createError) {
            console.error("‚ùå Erreur cr√©ation profil:", createError)
            return null
          }

          console.log("‚úÖ Profil cr√©√©:", newProfile)
          return newProfile
        }

        return null
      }

      console.log("‚úÖ Profil r√©cup√©r√©:", profile)
      return profile
    } catch (error) {
      console.error("‚ùå Erreur dans getCurrentUser:", error)
      return null
    }
  },

  // D√©connexion
  async logout(): Promise<void> {
    try {
      const { error } = await supabase.auth.signOut()
      if (error) {
        console.error("‚ùå Erreur d√©connexion:", error)
        throw new Error(error.message)
      }
      console.log("‚úÖ D√©connexion r√©ussie")
    } catch (error) {
      console.error("‚ùå Erreur dans logout:", error)
      throw error
    }
  },

  // Mettre √† jour le profil
  async updateProfile(userId: string, updates: Partial<UserProfile>): Promise<UserProfile> {
    console.log("üîÑ AuthService.updateProfile", userId, updates)

    try {
      const { data, error } = await supabase
        .from("users")
        .update({
          ...updates,
          updated_at: new Date().toISOString(),
        })
        .eq("id", userId)
        .select()
        .single()

      if (error) {
        console.error("‚ùå Erreur mise √† jour profil:", error)
        throw new Error(error.message)
      }

      console.log("‚úÖ Profil mis √† jour:", data)
      return data
    } catch (error) {
      console.error("‚ùå Erreur dans updateProfile:", error)
      throw error
    }
  },

  // Ajouter une m√©thode pour l'authentification c√¥t√© serveur
  async getServerUser(): Promise<UserProfile | null> {
    try {
      console.log("üîç AuthService.getServerUser - D√©but")

      // Pour les API routes, on utilise les cookies directement
      const {
        data: { user },
        error,
      } = await supabase.auth.getUser()

      if (error || !user) {
        console.log("‚ùå Pas d'utilisateur authentifi√© c√¥t√© serveur")
        return null
      }

      console.log("üë§ Utilisateur serveur trouv√©:", user.id)

      // R√©cup√©rer le profil
      const { data: profile, error: profileError } = await supabase.from("users").select("*").eq("id", user.id).single()

      if (profileError) {
        console.error("‚ùå Erreur profil serveur:", profileError)
        return null
      }

      console.log("‚úÖ Profil serveur r√©cup√©r√©:", profile)
      return profile
    } catch (error) {
      console.error("‚ùå Erreur dans getServerUser:", error)
      return null
    }
  },
  getCurrentUserFromRequest,
}
