#!/usr/bin/env node

/**
 * Script pour ex√©cuter la migration de la table etat_des_lieux_templates
 * 
 * Usage: node scripts/run-etat-des-lieux-templates-migration.js
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.error('Assurez-vous que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finies')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runMigration() {
  try {
    console.log('üöÄ D√©marrage de la migration etat_des_lieux_templates...')
    
    // Lire le fichier SQL
    const sqlPath = path.join(__dirname, 'create-etat-des-lieux-templates-table.sql')
    const sqlContent = fs.readFileSync(sqlPath, 'utf8')
    
    // Ex√©cuter la migration
    const { data, error } = await supabase.rpc('exec_sql', { sql: sqlContent })
    
    if (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution de la migration:', error)
      process.exit(1)
    }
    
    console.log('‚úÖ Migration ex√©cut√©e avec succ√®s!')
    console.log('üìã Table etat_des_lieux_templates cr√©√©e')
    console.log('üîê Politiques RLS configur√©es')
    console.log('üìä Index cr√©√©s pour optimiser les performances')
    console.log('üîí Contrainte d\'unicit√© ajout√©e')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    process.exit(1)
  }
}

// V√©rifier si la fonction exec_sql existe
async function checkExecSqlFunction() {
  try {
    const { data, error } = await supabase
      .from('pg_proc')
      .select('proname')
      .eq('proname', 'exec_sql')
      .limit(1)
    
    if (error || !data || data.length === 0) {
      console.log('‚ö†Ô∏è  La fonction exec_sql n\'existe pas. Cr√©ation...')
      
      // Cr√©er la fonction exec_sql
      const createFunctionSQL = `
        CREATE OR REPLACE FUNCTION exec_sql(sql text)
        RETURNS text
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $$
        BEGIN
          EXECUTE sql;
          RETURN 'OK';
        END;
        $$;
      `
      
      const { error: funcError } = await supabase.rpc('exec', { sql: createFunctionSQL })
      
      if (funcError) {
        console.error('‚ùå Erreur lors de la cr√©ation de la fonction exec_sql:', funcError)
        console.log('üí° Essayez d\'ex√©cuter manuellement le script SQL dans l\'interface Supabase')
        process.exit(1)
      }
      
      console.log('‚úÖ Fonction exec_sql cr√©√©e')
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de v√©rifier la fonction exec_sql. Tentative d\'ex√©cution directe...')
  }
}

async function main() {
  await checkExecSqlFunction()
  await runMigration()
}

main()
