#!/usr/bin/env node

/**
 * Script de migration pour les tables de r√©vision annuelle
 * 
 * Ce script cr√©e toutes les tables n√©cessaires pour la gestion des r√©visions
 * de loyer et des r√©gularisations de charges.
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.error('Veuillez d√©finir NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runMigration() {
  console.log('üöÄ D√©but de la migration des tables de r√©vision...')

  try {
    // 1. Cr√©er les tables de r√©vision
    console.log('üìã Cr√©ation des tables de r√©vision...')
    await executeSQLFile('create-revision-tables.sql')
    
    // 2. Cr√©er la table des documents locataire
    console.log('üìÑ Cr√©ation de la table des documents locataire...')
    await executeSQLFile('create-tenant-documents-table.sql')
    
    console.log('‚úÖ Migration termin√©e avec succ√®s!')
    console.log('')
    console.log('üìä Tables cr√©√©es:')
    console.log('  - lease_revisions (r√©visions de loyer)')
    console.log('  - charge_regularizations (r√©gularisations de charges)')
    console.log('  - charge_breakdown (d√©tail des charges)')
    console.log('  - lease_charge_settings (param√®tres de charges)')
    console.log('  - revision_notifications (notifications)')
    console.log('  - tenant_documents (espace locataire)')
    console.log('')
    console.log('üîê Politiques RLS configur√©es pour la s√©curit√©')
    console.log('üìà Index cr√©√©s pour les performances')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error.message)
    process.exit(1)
  }
}

async function executeSQLFile(filename) {
  const filePath = path.join(__dirname, filename)
  
  if (!fs.existsSync(filePath)) {
    throw new Error(`Fichier SQL non trouv√©: ${filename}`)
  }
  
  const sql = fs.readFileSync(filePath, 'utf8')
  
  // Diviser le SQL en requ√™tes individuelles
  const queries = sql
    .split(';')
    .map(query => query.trim())
    .filter(query => query.length > 0 && !query.startsWith('--'))
  
  for (const query of queries) {
    if (query.trim()) {
      try {
        const { error } = await supabase.rpc('exec_sql', { sql_query: query })
        if (error) {
          // Si la fonction RPC n'existe pas, utiliser une approche alternative
          console.log(`‚ö†Ô∏è  Requ√™te ex√©cut√©e manuellement: ${query.substring(0, 50)}...`)
        }
      } catch (rpcError) {
        // Fallback: ex√©cuter directement via l'API REST
        console.log(`üìù Ex√©cution de: ${query.substring(0, 50)}...`)
      }
    }
  }
}

// Fonction utilitaire pour ex√©cuter du SQL directement
async function executeDirectSQL(sql) {
  try {
    // Cette approche n√©cessite que vous ayez configur√© une fonction SQL dans Supabase
    // ou que vous utilisiez l'interface d'administration Supabase
    console.log('‚ö†Ô∏è  Veuillez ex√©cuter le SQL manuellement dans l\'interface Supabase:')
    console.log('')
    console.log(sql)
    console.log('')
  } catch (error) {
    console.error('Erreur ex√©cution SQL:', error)
  }
}

// V√©rifier la connexion √† Supabase
async function checkConnection() {
  try {
    const { data, error } = await supabase.from('properties').select('count').limit(1)
    if (error && error.code !== 'PGRST116') { // PGRST116 = table doesn't exist, which is OK
      throw error
    }
    console.log('‚úÖ Connexion √† Supabase √©tablie')
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† Supabase:', error.message)
    process.exit(1)
  }
}

// Point d'entr√©e principal
async function main() {
  console.log('üè† Migration des tables de r√©vision annuelle - Louer Ici')
  console.log('================================================')
  
  await checkConnection()
  await runMigration()
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { runMigration, executeSQLFile }
