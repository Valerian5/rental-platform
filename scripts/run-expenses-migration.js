const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes')
  console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl)
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey)
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runMigration() {
  try {
    console.log('üîÑ D√©marrage de la migration des tables fiscales...')

    // Lire le fichier SQL
    const sqlPath = path.join(__dirname, 'create-expenses-table.sql')
    const sqlContent = fs.readFileSync(sqlPath, 'utf8')

    // Ex√©cuter le SQL
    console.log('üìù Ex√©cution du script SQL...')
    const { error } = await supabase.rpc('exec_sql', { sql: sqlContent })

    if (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution du SQL:', error)
      return
    }

    console.log('‚úÖ Migration termin√©e avec succ√®s!')
    console.log('üìã Tables cr√©√©es:')
    console.log('  - expenses (d√©penses fiscales)')
    console.log('  - charge_regularizations (r√©gularisations de charges)')
    console.log('  - fiscal_summary (vue r√©capitulative)')
    console.log('  - rental_income_summary (vue revenus locatifs)')

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
  }
}

// Fonction alternative si exec_sql n'est pas disponible
async function runMigrationAlternative() {
  try {
    console.log('üîÑ D√©marrage de la migration alternative...')

    // Cr√©er la table expenses
    console.log('üìù Cr√©ation de la table expenses...')
    const { error: expensesError } = await supabase
      .from('expenses')
      .select('id')
      .limit(1)

    if (expensesError && expensesError.code === 'PGRST116') {
      console.log('‚ö†Ô∏è  Table expenses n\'existe pas, veuillez ex√©cuter le SQL manuellement')
      console.log('üìÑ Fichier SQL:', path.join(__dirname, 'create-expenses-table.sql'))
    } else {
      console.log('‚úÖ Table expenses existe d√©j√†')
    }

    // V√©rifier la table charge_regularizations
    console.log('üìù V√©rification de la table charge_regularizations...')
    const { error: regularizationsError } = await supabase
      .from('charge_regularizations')
      .select('id')
      .limit(1)

    if (regularizationsError && regularizationsError.code === 'PGRST116') {
      console.log('‚ö†Ô∏è  Table charge_regularizations n\'existe pas, veuillez ex√©cuter le SQL manuellement')
    } else {
      console.log('‚úÖ Table charge_regularizations existe d√©j√†')
    }

    console.log('‚úÖ V√©rification termin√©e!')
    console.log('üìã Pour cr√©er les tables, ex√©cutez le SQL dans l\'interface Supabase:')
    console.log('   https://supabase.com/dashboard/project/[votre-projet]/sql')

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cuter la migration
if (process.argv.includes('--alternative')) {
  runMigrationAlternative()
} else {
  runMigration()
}
